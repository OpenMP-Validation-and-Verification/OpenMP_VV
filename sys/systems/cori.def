# Definitions for the CORI GPU system

$(info "Including cori.def file")

#---------------------------------------------------------------------------
# BATCH Scheduler
#---------------------------------------------------------------------------
JSRUN_COMMAND = srun -n 1 
BATCH_SCHEDULER = $(JSRUN_COMMAND)

CUDA_MODULE ?= 
#---------------------------------------------------------------------------
# C compilers
#---------------------------------------------------------------------------
CCOMPILERS="clang, gcc, cc"

# GCC compiler
ifeq ($(CC), gcc)
  C_COMPILER_MODULE = gcc/10-devel-omp_20201218
  C_VERSION = gcc -dumpversion
endif

# CRAY compiler
ifeq ($(CC), cc)
  C_COMPILER_MODULE = PrgEnv-cray/6.0.9; module load cdt; module load craype-x86-skylake; module switch cce cce/11.0.1; module load cuda/10.1.243; module load openmpi/4.0.3; module unload cray-libsci
  C_VERSION = cc --version 2>&1 | grep -oh 'clang version [0-9.]*'| grep -oh 'version .*' | sed "s/version/cray/g"
endif

# CRAY classic compiler
#ifeq ($(CC), cc)
#  C_COMPILER_MODULE = cdt/19.11; module load PrgEnv-cray; module switch cce cce/9.1.3-classic; module load craype-x86-skylake; module unload cray-libsci; module load cudatoolkit craype-accel-nvidia70
#  C_VERSION = cc --version 2>&1 | grep -oh 'Cray cc : Version [0-9.]*' | grep -oh 'Version .*' | sed "s/Version/cray classic/g"
#endif

# Clang compiler
ifeq ($(CC), clang)
  C_COMPILER_MODULE = PrgEnv-llvm/12.0.0-git_20210117
  C_VERSION = clang -v 2>&1 | grep -oh 'clang version [0-9.]*'| grep -oh 'version .*' 
endif

#---------------------------------------------------------------------------
# C++ compilers
#---------------------------------------------------------------------------
CXXCOMPILERS="clang++, g++, CC"

# GCC compiler
ifeq ($(CXX), g++)
  CXX_COMPILER_MODULE = gcc/10-devel-omp_20201218
  CXX_VERSION = g++ -dumpversion
endif


# CRAY compiler
ifeq ($(CXX), CC)
  CXX_COMPILER_MODULE = PrgEnv-cray/6.0.9; module load cdt; module load craype-x86-skylake; module switch cce cce/11.0.1; module load cuda/10.1.243; module load openmpi/4.0.3; module unload cray-libsci
  CXX_VERSION = CC --version 2>&1 | grep -oh 'clang version [0-9.]*'| grep -oh 'version .*' | sed "s/version/cray/g"
endif

# CRAY classic compiler
#ifeq ($(CXX), CC)
#  CXX_COMPILER_MODULE = cdt/19.11; module load PrgEnv-cray; module switch cce cce/9.1.3-classic; module load craype-x86-skylake; module unload cray-libsci; module load cudatoolkit craype-accel-nvidia70
#  CXX_VERSION = CC --version 2>&1 | grep -oh 'Cray C++ : Version [0-9.]*' | grep -oh 'Version .*' | sed "s/Version/cray classic/g"
#endif


# Clang compiler
ifeq ($(CXX), clang++)
  CXX_COMPILER_MODULE = PrgEnv-llvm/12.0.0-git_20210117
  CXX_VERSION = clang++ -v 2>&1 | grep -oh 'clang version [0-9.]*' | grep -oh 'version .*' 
endif

#---------------------------------------------------------------------------
# FORTRAN Compilers
#---------------------------------------------------------------------------
FCOMPILERS="gfortran, ftn"

# GCC compiler
ifeq ($(FC), gfortran)
  F_COMPILER_MODULE = gcc/10-devel-omp_20201218
  F_VERSION = gfortran -dumpversion
endif

# CRAY classic compiler
ifeq ($(FC), ftn)
  F_COMPILER_MODULE = cdt/19.11 PrgEnv-cray; module switch cce cce/9.1.0-classic; module load craype-x86-skylake; module unload cray-libsci; module load cudatoolkit craype-accel-nvidia70
  F_VERSION = ftn --version 2>&1 | grep -oh 'Cray Fortran : Version [0-9.]*' | grep -oh 'Version .*' | sed "s/Version/cray classic/g"
endif

