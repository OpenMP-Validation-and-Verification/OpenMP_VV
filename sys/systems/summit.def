# Definitions for the Summit system

$(info "Including summit.def file")

#---------------------------------------------------------------------------
# BATCH Scheduler
#---------------------------------------------------------------------------
JSRUN_COMMAND = jsrun -n 1 -g 6 -a 1 
BATCH_SCHEDULER = $(JSRUN_COMMAND)

CUDA_MODULE ?= cuda/9.2.148
#---------------------------------------------------------------------------
# C compilers
#---------------------------------------------------------------------------
CCOMPILERS="clang, gcc, xlc"

# GCC compiler
ifeq ($(CC), gcc)
  C_COMPILER_MODULE = gcc/10.2.0
  C_VERSION = gcc -dumpversion
endif

# IBM XL compiler
ifeq ($(CC), xlc)
  C_COMPILER_MODULE = xl/16.1.1-8
  C_VERSION = xlc -qversion | grep "Version: .*" | sed "s/Version: //g"
endif

# Clang compiler
# ifeq ($(CC), clang)
#   C_COMPILER_MODULE = llvm/1.0-20190225
#   C_COMPILER_MODULE = cuda/10.1.243; module use /sw/summit/modulefiles/ums/stf010/Core; module load llvm/13.0.0-latest
#   C_COMPILER_MODULE = llvm/11.0.0-rc1; module load cuda/10.1.243
#   C_VERSION = clang -v 2>&1 | grep -oh "clang version [0-9.]*"| grep -oh "version .*" | sed "s/.*/& CORAL/"
# endif

# Clang compiler
ifeq ($(CC), clang)
  C_COMPILER_MODULE = cuda/10.1.243; module use /sw/summit/modulefiles/ums/stf010/Core; module load llvm/13.0.0-latest
  C_VERSION = clang -v 2>&1 | grep -oh "clang version [0-9.]*" | grep -oh "version .*"
endif


#---------------------------------------------------------------------------
# C++ compilers
#---------------------------------------------------------------------------
CXXCOMPILERS="clang++, g++, xlc++"

# GCC compiler
ifeq ($(CXX), g++)
  CXX_COMPILER_MODULE = gcc/10.2.0
  CXX_VERSION = g++ -dumpversion
endif

# IBM XL compiler
ifeq ($(CXX), xlc++)
  CXX_COMPILER_MODULE =  xl/16.1.1-8
  CXX_VERSION = xlc -qversion | grep "Version: .*" | sed "s/Version: //g"
endif

# Clang compiler
# ifeq ($(CXX), clang)
#   CXX_COMPILER_MODULE = llvm/1.0-20190225
#   CXX_VERSION = clang -v 2>&1 | grep -oh "clang version [0-9.]*"| grep -oh "version .*" | sed "s/.*/& CORAL/"
# endif

# Clang compiler
ifeq ($(CXX), clang++)
  CXX_COMPILER_MODULE = cuda/10.1.243; module use /sw/summit/modulefiles/ums/stf010/Core; module load llvm/13.0.0-latest
  CXX_VERSION = clang++ -v 2>&1 | grep -oh "clang version [0-9.]*" | grep -oh "version .*"
endif

#---------------------------------------------------------------------------
# FORTRAN Compilers
#---------------------------------------------------------------------------
FCOMPILERS="gfortran, xlf"

# GCC compiler
ifeq ($(FC), gfortran)
  F_COMPILER_MODULE = gcc/10.2.0
  F_VERSION = gfortran -dumpversion
endif

# IBM XL compiler
# Summit happens to have a wrapper that we need in order to execute
# xlf with OMP 4.5 support. This wrapper is xlf_r.
ifeq ($(FC), $(filter $(FC), xlf xlf_r))
  F_COMPILER_MODULE = xl/16.1.1-8
  F_VERSION = xlf -qversion | grep "Version: .*" | sed "s/Version: //g"
endif
