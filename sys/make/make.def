#---------------------------------------------------------------------------
#
#                SITE- AND/OR PLATFORM-SPECIFIC DEFINITIONS.
#
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Items in this file will need to be changed for each platform.
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
#
# CC/CXX         - C/C++ compiler
# CFLAGS/CXXFLAG     - C/C++ compilation arguments
# C_INC/CXX_INC      - any -I arguments required for compiling C/C++
# CLINK/CXXLINK     - C/C++ linker
# CLINKFLAGS/CXXLINKFLAGS - C/C++ linker flags
# C_LIB/CXX_LIB      - any -L and -l arguments required for linking C/C++
#
# For C compilations are done with $(CC) $(C_INC) $(CFLAGS) or
#                            $(CC) $(CFLAGS)
# linking is done with       $(CLINK) $(C_LIB) $(CLINKFLAGS)
#
# For C++ compilations are done with $(CXX) $(CXX_INC) $(CXXFLAGS) or
#                            $(CXX) $(CXXFLAGS)
# linking is done with       $(CXXLINK) $(CXX_LIB) $(CXXLINKFLAGS)
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Helper functions
#---------------------------------------------------------------------------

##################################################
# Loading modules
##################################################
define loadModules
  $(if $(MODULE_LOAD), module load $(CUDA_MODULE) $(1) $(if $(or $(QUIET), $(2)), > /dev/null 2> /dev/null,);,)
endef

##################################################
# LOG HEADER AND FOOTER FORTMATS
##################################################

# Check if we are working on a git folder
OMPVV_IS_GIT=${shell git rev-parse --is-inside-work-tree 2> /dev/null}
ifeq ("${OMPVV_IS_GIT}", "true")
  OMPVV_GIT_COMMIT=${shell git log -n 1 --pretty=format:%h}
else
  OMPVV_GIT_COMMIT=""
endif

# parameters (1) Action (2) System (3) Filename (4) other Info (compiler) (5) OMP spec version (6) Log File
define log_section_header
  -$(if $(LOG), @echo -e "*-*-*BEGIN*-*-*$(1)*-*-*$$(date)*-*-*$(2)*-*-*$(shell realpath --relative-to="$$(pwd)" $(3))*-*-*$(4)*-*-*$(OMPVV_GIT_COMMIT)*-*-*$(5)*-*-*" >> $(LOGDIR)/$(6);,)
endef

# parameters (1) Action (2) System (3) Output status  (4) other Info (compiler) (5) Log File
define log_section_footer
  -$(if $(LOG), @echo -e "*-*-*END*-*-*$(1)*-*-*$$(date)*-*-*$(2)*-*-*$(3)*-*-*$(4)*-*-*$(OMPVV_GIT_COMMIT)*-*-*\n" >> $(LOGDIR)/$(5);,)
endef
#---------------------------------------------------------------------------
# C compilers
#---------------------------------------------------------------------------
CCOMPILERS?="cc, clang, gcc, xlc"
C_VERSION?= echo "version unknown"
CC?=none
CPP?=none
FC?=none

# CRAY compilers
ifeq ($(DEVICE_TYPE), amd)
  # CRAY compiler (AMD)
  ifeq ($(CC), cc)
    CFLAGS += -fopenmp -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa
    CLINK = cc
    CLINKFLAGS += -fopenmp -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa
  endif
else ifeq ($(DEVICE_TYPE), nvidia)
  # CRAY compiler (NVIDIA)
  ifeq ($(CC), cc)
    CFLAGS += -fopenmp -fopenmp-targets=nvptx64 -Xopenmp-target
    CLINK = cc
    CLINKFLAGS += -fopenmp -fopenmp-targets=nvptx64 -Xopenmp-target
  endif
endif

# GCC compiler
ifeq ($(CC), gcc)
  COFFLOADING = -foffload="-lm" -lm
  C_NO_OFFLOADING = -foffload=disable
  CFLAGS += -O3 -std=c99 -fopenmp $(COFFLOADING)
  CLINK = gcc
  CLINKFLAGS += -O3 -fopenmp $(COFFLOADING)
  C_VERSION = echo "$(shell $(call loadModules,$(C_COMPILER_MODULE),"shut up") gcc --version | head -n 1 | sed 's/.* \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/g')"
endif

# IBM XL compiler
ifeq ($(CC), xlc)
  COFFLOADING = -qoffload
  C_NO_OFFLOADING =
  CFLAGS += -O3 -qsmp=omp $(COFFLOADING)
  CLINK = xlc
  CLINKFLAGS += -O3 -qsmp=omp $(COFFLOADING)
endif

# Clang compiler
ifeq ($(CC), clang)
  COFFLOADING = -fopenmp-targets=nvptx64-nvidia-cuda
  C_NO_OFFLOADING =
  CFLAGS += -lm -O3 -fopenmp $(COFFLOADING)
  #Adding this to fix problem with math.h
  CFLAGS +=  -D__NO_MATH_INLINES -U__SSE2_MATH__ -U__SSE_MATH__
  CLINK = clang
  CLINKFLAGS += -lm -O3 -fopenmp $(COFFLOADING)
  C_VERSION = echo "$(shell $(call loadModules,$(C_COMPILER_MODULE),"shut up") clang --version | head -n 1 | sed 's/clang version \([0-9]*\.[0-9]*\.[0-9]*\)/\1/g')"
endif

# AOMP compiler
ifeq ($(CC), aomp)
  $(warning "AOMP is still experimental. AOMP uses clang front end, make sure the clang aomp is selected")
  INSTALLED_GPU  = $(shell $(call loadModules, $(C_COMPILER_MODULE),"shut up") mygpu -d gfx900 2> /dev/null)
  AOMP_GPU       ?= $(INSTALLED_GPU)
  AOMP_CPUTARGET ?= x86_64-pc-linux-gnu
  ifeq (sm_,$(findstring sm_,$(AOMP_GPU)))
    $(warning "AOMP GPU NOT FOUND. USING HOST")
    AOMP_GPUTARGET = nvptx64-nvidia-cuda
  else
    AOMP_GPUTARGET = amdgcn-amd-amdhsa
  endif

  ifeq (sm_,$(findstring sm_,$(AOMP_GPU)))
    CUDA_PATH  ?= /usr/local/cuda
    UNAMEP = $(shell uname -p)
    CLINKFLAGS += -L$(CUDA)/targets/$(UNAMEP)-linux/lib -lcudart
  endif
  ifeq ("$(AOMP_GPUTARGET)", "")
    $(error AOMP_GPUTARGET not specified or discovered.)
  endif
  ifeq ("$(AOMP_GPU)", "")
    $(error AOMP_GPU not specified or discovered.)
  endif

  override CC = clang
  COFFLOADING = -target $(AOMP_CPUTARGET) -fopenmp-targets=$(AOMP_GPUTARGET) -Xopenmp-target=$(AOMP_GPUTARGET) -march=$(AOMP_GPU)
  C_NO_OFFLOADING =
  CFLAGS += -lm -O3 -fopenmp $(COFFLOADING)
  #Adding this to fix problem with math.h
  CFLAGS +=  -D__NO_MATH_INLINES -U__SSE2_MATH__ -U__SSE_MATH__
  CLINK = clang
  CLINKFLAGS += -lm -O3 -fopenmp $(COFFLOADING)
endif

#---------------------------------------------------------------------------
# C++ compilers
#---------------------------------------------------------------------------
CXXCOMPILERS?="clang++, g++, xlc++"
CXX_VERSION?= echo "version unknown"

# CRAY compilers
ifeq ($(DEVICE_TYPE), amd)
  # CRAY compiler (AMD)
  ifeq ($(CXX), CC)
    CXXFLAGS += -fopenmp -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx906
    CXXLINK = cc
    CXXLINKFLAGS += -fopenmp -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx906
  endif
else
  # CRAY compiler (NVIDIA)
  ifeq ($(CXX), CC)
    CXXFLAGS += -fopenmp -fopenmp-targets=nvptx64 -Xopenmp-target -march=sm_70
    CXXLINK = cc
    CXXLINKFLAGS += -fopenmp -fopenmp-targets=nvptx64 -Xopenmp-target -march=sm_70
  endif
endif

# GCC compiler
ifeq ($(CXX), g++)
  CXXOFFLOADING = -foffload="-lm" -lm
  CXX_NO_OFFLOADING = -foffload=disable
  CXXFLAGS += -std=c++11 -O3 -fopenmp $(CXXOFFLOADING)
  CXXLINK = g++
  CXXLINKFLAGS += -O3 -fopenmp $(CXXOFFLOADING)
  CXX_VERSION = echo "$(shell $(call loadModules,$(CXX_COMPILER_MODULE),"shut up") g++ --version | head -n 1 | sed 's/.* \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/g')"
endif

# IBM XL compiler
ifeq ($(CXX), xlc++)
  CXXOFFLOADING = -qoffload
  CXX_NO_OFFLOADING =
  CXXFLAGS += -std=c++11 -O3 -qsmp=omp $(CXXOFFLOADING)
  CXXLINK = xlc++
  CXXLINKFLAGS += -O3 -qsmp=omp $(CXXOFFLOADING)
endif

# Clang compiler
ifeq ($(CXX), clang++)
  CXXOFFLOADING = -fopenmp-targets=nvptx64-nvidia-cuda
  CXX_NO_OFFLOADING =
  CXXFLAGS += -std=c++11 -lm -O3 -fopenmp $(CXXOFFLOADING)
  #Adding this to fix problem with math.h
  CXXFLAGS +=  -D__NO_MATH_INLINES -U__SSE2_MATH__ -U__SSE_MATH__
  CXXLINK = clang++
  CXXLINKFLAGS += -lm -O3 -fopenmp $(CXXOFFLOADING)
  CXX_VERSION = echo "$(shell $(call loadModules,$(CXX_COMPILER_MODULE),"shut up") clang++ --version | head -n 1 | sed 's/clang version \([0-9]*\.[0-9]*\.[0-9]*\)/\1/g')"
endif

# AOMP compiler
ifeq ($(CXX), aomp)
  $(warning "AOMP is still experimental. AOMP uses clang front end, make sure the clang aomp is selected")
  INSTALLED_GPU  = $(shell $(call loadModules, $(C_COMPILER_MODULE),"shut up") mygpu -d gfx900 2> /dev/null)
  AOMP_GPU       ?= $(INSTALLED_GPU)
  AOMP_CPUTARGET ?= x86_64-pc-linux-gnu
  ifeq (sm_,$(findstring sm_,$(AOMP_GPU)))
    $(warning "AOMP GPU NOT FOUND. USING HOST")
    AOMP_GPUTARGET = nvptx64-nvidia-cuda
  else
    AOMP_GPUTARGET = amdgcn-amd-amdhsa
  endif

  ifeq (sm_,$(findstring sm_,$(AOMP_GPU)))
    CUDA_PATH  ?= /usr/local/cuda
    UNAMEP = $(shell uname -p)
    CLINKFLAGS += -L$(CUDA)/targets/$(UNAMEP)-linux/lib -lcudart
  endif
  ifeq ("$(AOMP_GPUTARGET)", "")
    $(error AOMP_GPUTARGET not specified or discovered.)
  endif
  ifeq ("$(AOMP_GPU)", "")
    $(error AOMP_GPU not specified or discovered.)
  endif

  override CXX = clang++
  CXXOFFLOADING = -target $(AOMP_CPUTARGET) -fopenmp-targets=$(AOMP_GPUTARGET) -Xopenmp-target=$(AOMP_GPUTARGET) -march=$(AOMP_GPU)
  CXX_NO_OFFLOADING =
  CXXFLAGS += -lm -std=c++11 -O3 -fopenmp $(CXXOFFLOADING)
  #Adding this to fix problem with math.h
  CXXFLAGS +=  -D__NO_MATH_INLINES -U__SSE2_MATH__ -U__SSE_MATH__
  CXXLINK = clang++
  CXXLINKFLAGS += -lm -O3 -fopenmp $(CXXOFFLOADING)
endif

#---------------------------------------------------------------------------
# FORTRAN compilers
#---------------------------------------------------------------------------
FCOMPILERS?="gfortran, xlf"
F_VERSION?= echo "version unknown"

# GCC compiler
ifeq ($(FC), gfortran)
  FOFFLOADING = -foffload="-lm" -lm
  F_NO_OFFLOADING = -foffload=disable
  FFLAGS += -O3 -fopenmp $(FOFFLOADING) -ffree-line-length-none -J./ompvv
  FLINK = gcc
  FLINKFLAGS += -O3 -fopenmp $(FOFFLOADING)
  F_VERSION = echo "$(shell $(call loadModules,$(F_COMPILER_MODULE),"shut up") gfortran --version | head -n 1 | sed 's/.* \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/g')"
endif

# IBM XLF compiler
# Summitdev happens to have a wrapper that without it we cannot execute
# xlf with OMP 4.5 support. This wrapper is xlf_r
ifeq ($(FC), $(filter $(FC), xlf xlf_r))
  FOFFLOADING = -qoffload
  F_NO_OFFLOADING =
  FFLAGS += -O3 -qsmp=omp $(FOFFLOADING) -qmoddir=./ompvv -DEXIT=EXIT_
  FLINK = xlc
  FLINKFLAGS += -O3 -qsmp=omp $(FOFFLOADING)
endif

# CRAY compilers
ifeq ($(DEVICE_TYPE), amd)
  # CRAY compiler (AMD)
  ifeq ($(FC), ftn)
    FFLAGS += -fopenmp -J./ompvv
    FLINK = cc
    FLINKFLAGS += -fopenmp
  endif
else
  # CRAY compiler (NVIDIA)
  ifeq ($(FC), ftn)
    FFLAGS += -fopenmp -J./ompvv
    FLINK = cc
    FLINKFLAGS += -fopenmp
  endif
endif

#---------------------------------------------------------------------------
# These macros are passed to the linker
#---------------------------------------------------------------------------
C_LIB  =
CXX_LIB  =
F_LIB =

#---------------------------------------------------------------------------
# These macros are passed to the compiler
#---------------------------------------------------------------------------
C_INC = -I./ompvv
CXX_INC = -I./ompvv
F_INC = -I./ompvv

#---------------------------------------------------------------------------
# Thread and team numbers for the compiler
#---------------------------------------------------------------------------
ifdef NUM_THREADS_DEVICE
      DTHREADS = -DOMPVV_NUM_THREADS_DEVICE=${NUM_THREADS_DEVICE}
endif

ifdef NUM_TEAMS_DEVICE
      DTEAMS = -DOMPVV_NUM_TEAMS_DEVICE=${NUM_TEAMS_DEVICE}
endif

ifdef NUM_THREADS_HOST
      HTHREADS = -DOMPVV_NUM_THREADS_HOST=${NUM_THREADS_HOST}
endif

#---------------------------------------------------------------------------
# Destination of executables, relative to subdirs of the main directory. .
#---------------------------------------------------------------------------
BINDIR ?= bin

#---------------------------------------------------------------------------
# COMPILER DEF
#---------------------------------------------------------------------------
CCOMPILE = $(CC) $(C_INC) $(CFLAGS)
CXXCOMPILE = $(CXX) $(CXX_INC) $(CXXFLAGS)
FCOMPILE = $(FC) $(F_INC) $(FFLAGS)

#---------------------------------------------------------------------------
# COLORS DEF
#---------------------------------------------------------------------------
TXTBLK := "\033[0;30m" # Black - Regular
TXTRED := "\033[0;31m" # Red
TXTGRN := "\033[0;32m" # Green
TXTYLW := "\033[0;33m" # Yellow
TXTBLU := "\033[0;34m" # Blue
TXTPUR := "\033[0;35m" # Purple
TXTCYN := "\033[0;36m" # Cyan
TXTWHT := "\033[0;37m" # White
TXTNOC := "\033[0m"

#---------------------------------------------------------------------------
# LOGS
#---------------------------------------------------------------------------
LOGRANDNUM := ${shell echo $$RANDOM}
LOGTEMPFILE ?= _ompvv_temp_result_.exitstatus.${LOGRANDNUM}
