#---------------------------------------------------------------------------
#
#                SITE- AND/OR PLATFORM-SPECIFIC DEFINITIONS. 
#
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Items in this file will need to be changed for each platform.
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
#
# CC/CXX         - C/C++ compiler 
# CFLAGS/CXXFLAG     - C/C++ compilation arguments
# C_INC/CXX_INC      - any -I arguments required for compiling C/C++
# CLINK/CXXLINK     - C/C++ linker
# CLINKFLAGS/CXXLINKFLAGS - C/C++ linker flags
# C_LIB/CXX_LIB      - any -L and -l arguments required for linking C/C++ 
#
# For C compilations are done with $(CC) $(C_INC) $(CFLAGS) or
#                            $(CC) $(CFLAGS)
# linking is done with       $(CLINK) $(C_LIB) $(CLINKFLAGS)
#
# For C++ compilations are done with $(CXX) $(CXX_INC) $(CXXFLAGS) or
#                            $(CXX) $(CXXFLAGS)
# linking is done with       $(CXXLINK) $(CXX_LIB) $(CXXLINKFLAGS)
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# C compilers
#---------------------------------------------------------------------------
CCOMPILERS?="cc, clang, gcc, xlc"
C_VERSION?= echo "version unknown"
CC?=none
CPP?=none
FC?=none

# CRAY compiler
ifeq ($(CC), cc)
  CFLAGS += -homp -O3
  CLINK = cc
  CLINKFLAGS += -homp -lm
endif

# GCC compiler
ifeq ($(CC), gcc)
  COFFLOADING = -foffload="-lm" -lm
  C_NO_OFFLOADING = -foffload=disable
  CFLAGS += -O3 -std=c99 -fopenmp $(COFFLOADING) 
  CLINK = gcc
  CLINKFLAGS += -O3 -fopenmp $(COFFLOADING)
endif

# IBM XL compiler
ifeq ($(CC), xlc)
  COFFLOADING = -qoffload
  C_NO_OFFLOADING = 
  CFLAGS += -O3 -qsmp=omp $(COFFLOADING)
  CLINK = xlc
  CLINKFLAGS += -O3 -qsmp=omp $(COFFLOADING)
endif

# Clang compiler
ifeq ($(CC), clang)
  COFFLOADING = -fopenmp-targets=nvptx64-nvida-cuda
  C_NO_OFFLOADING = 
  CFLAGS += -O3 -std=c99 -fopenmp $(COFFLOADING)
  CLINK = clang
  CLINKFLAGS += -O3 -fopenmp $(COFFLOADING)
endif

#---------------------------------------------------------------------------
# C++ compilers
#---------------------------------------------------------------------------
CXXCOMPILERS?="clang++, g++, xlc++"
CXX_VERSION?= echo "version unknown"

# CRAY compiler
ifeq ($(CXX), CC)
  CXXFLAGS += -homp -O3
  CXXLINK = cc
  CXXLINKFLAGS += -homp -lm
endif

# GCC compiler
ifeq ($(CXX), g++)
  CXXOFFLOADING = -foffload="-lm" -lm
  CXX_NO_OFFLOADING = -foffload=disable
  CXXFLAGS += -O3 -fopenmp $(CXXOFFLOADING)
  CXXLINK = g++
  CXXLINKFLAGS += -O3 -fopenmp $(CXXOFFLOADING)
endif

# IBM XL compiler
ifeq ($(CXX), xlc++)
  CXXOFFLOADING = -qoffload
  CXX_NO_OFFLOADING = 
  CXXFLAGS += -O3 -qsmp=omp $(CXXOFFLOADING)
  CXXLINK = xlc++
  CXXLINKFLAGS += -O3 -qsmp=omp $(CXXOFFLOADING)
endif

# Clang compiler
ifeq ($(CXX), clang++)
  CXXOFFLOADING = -fopenmp-targets=nvptx64-nvida-cuda 
  CXX_NO_OFFLOADING = 
  CXXFLAGS += -O3 -fopenmp $(CXXOFFLOADING) 
  CXXLINK = clang++
  CXXLINKFLAGS += -O3 -fopenmp $(CXXOFFLOADING)
endif

#---------------------------------------------------------------------------
# FORTRAN compilers
#---------------------------------------------------------------------------
FCOMPILERS?="gfortran, xlf"
F_VERSION?= echo "version unknown"

# GCC compiler
ifeq ($(FC), gfortran)
  FOFFLOADING = -foffload="-lm" -lm
  F_NO_OFFLOADING = -foffload=disable
  FFLAGS += -O3 -fopenmp $(FOFFLOADING) -ffree-line-length-none -J./ompvv
  FLINK = gcc
  FLINKFLAGS += -O3 -fopenmp $(FOFFLOADING)
endif

# IBM XLF compiler
# Summitdev happens to have a wrapper that without it we cannot execute 
# xlf with OMP 4.5 support. This wrapper is xlf_r
ifeq ($(FC), $(filter $(FC), xlf xlf_r))
  FOFFLOADING = -qoffload
  F_NO_OFFLOADING = 
  FFLAGS += -O3 -qsmp=omp $(FOFFLOADING) -qmoddir=./ompvv -DEXIT=EXIT_
  FLINK = xlc
  FLINKFLAGS += -O3 -qsmp=omp $(FOFFLOADING)
endif
#---------------------------------------------------------------------------
# These macros are passed to the linker 
#---------------------------------------------------------------------------
C_LIB  = 
CXX_LIB  = 
F_LIB = 

#---------------------------------------------------------------------------
# These macros are passed to the compiler 
#---------------------------------------------------------------------------
C_INC = -I./ompvv
CXX_INC = -I./ompvv
F_INC = -I./ompvv

#---------------------------------------------------------------------------
# Destination of executables, relative to subdirs of the main directory. . 
#---------------------------------------------------------------------------
BINDIR ?= bin

#---------------------------------------------------------------------------
# COMPILER DEF
#---------------------------------------------------------------------------
CCOMPILE = $(CC) $(C_INC) $(CFLAGS)
CXXCOMPILE = $(CXX) $(CXX_INC) $(CXXFLAGS)
FCOMPILE = $(FC) $(F_INC) $(FFLAGS)

#---------------------------------------------------------------------------
# COLORS DEF
#---------------------------------------------------------------------------
TXTBLK := "\033[0;30m" # Black - Regular
TXTRED := "\033[0;31m" # Red
TXTGRN := "\033[0;32m" # Green
TXTYLW := "\033[0;33m" # Yellow
TXTBLU := "\033[0;34m" # Blue
TXTPUR := "\033[0;35m" # Purple
TXTCYN := "\033[0;36m" # Cyan
TXTWHT := "\033[0;37m" # White
TXTNOC := "\033[0m"

#---------------------------------------------------------------------------
# LOGS
#---------------------------------------------------------------------------
LOGTEMPFILE ?= _ompvv_temp_result_.exitstatus
